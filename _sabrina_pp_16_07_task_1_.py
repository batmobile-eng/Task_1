# -*- coding: utf-8 -*-
"""_sabrina_pp_16-07_TASK_1_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nzQBxxpYydR_P68BST1BkS2Mc-puZDL3

Project Title: "Movie Recommendation System"
Objective: Build a Python application that allows users to explore and recommend movies based on
genres, ratings, or popularity, using a dataset of movies.

# Introduction  

The **Movie Recommendation System** is a Python-based application that allows users to explore and recommend movies efficiently.  

### Key Features:  
- **Dataset Management**:  
  - Load and explore movie data (title, genre, release year, rating, director, etc.).  
  - Filter movies by genre, release year, or director.  

- **Advanced Search**:  
  - Search movies by title or keywords in descriptions and genres.  
  - Recommend movies based on selected genres or directors.  

- **User Interaction**:  
  - Add movie ratings and reviews.  
  - Update and recalculate average ratings dynamically.  

- **Enhanced Features** *(Optional)*:  
  - Personalized movie recommendations based on user preferences.  
  - Generate "Top 10" movie lists by genre, year, or ratings.  
  - Visualize data such as rating distributions and genre counts.  
  - Sentiment analysis of user reviews using keyword matching.  

- **Interactive Menu**:  
  - View filtered movies.  
  - Add reviews or ratings.  
  - Access recommendations and top-rated movies.  

This project combines data handling, user interactivity, and analytics to create an engaging movie discovery experience.

# New Section

1. Movie Dataset

● Provide a CSV file containing movie data:
○ Fields: Movie ID, Title, Genre, Release Year, Rating, Number of
Votes, Duration, Director.

● Allow users to:
○ Load and explore the dataset.
○ Filter movies by genre, release year, or director.
"""



import csv

# Define the header row
header = ['Movie ID', 'Title', 'Genre', 'Release Year', 'Rating', 'Number of Votes', 'Duration', 'Director']

# Create and write to the CSV file
with open('Movie_Recommendation_System.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(header)

print("CSV file 'Movie_Recommendation_System.csv' created with header.")

"""/content/drive/MyDrive/Python _iict/7_Movie_Recommendation_System.csv"""



import csv

# Dataset file path
dataset_file_path = '/content/drive/MyDrive/Python _iict/7_Movie_Recommendation_System.csv'

# CSV file path
csv_file_path = '/content/Movie_Recommendation_System.csv'

# Read data from the dataset file
with open(dataset_file_path, 'r') as dataset_file:
    reader = csv.reader(dataset_file)
    # Skip the header row in the dataset file if it has one
    next(reader, None)
    dataset_data = list(reader)

# Append data to the CSV file
with open(csv_file_path, 'a', newline='') as csv_file:
    writer = csv.writer(csv_file)
    writer.writerows(dataset_data)

print(f"Data from '{dataset_file_path}' imported into '{csv_file_path}'.")

"""Summary:
The provided Python script is designed to read data from a dataset file and append it to a specified CSV file. Here's a summary of its functionality:  

1. **File Paths**:  
   - Reads the dataset from the specified file path (`dataset_file_path`).
   - Appends the data to a target CSV file (`csv_file_path`).  

2. **Data Processing**:  
   - Opens the dataset file in read mode and reads its contents using the `csv.reader`.  
   - Skips the header row if present to avoid duplicating it.  
   - Converts the dataset into a list of rows.  

3. **Appending Data**:  
   - Opens the target CSV file in append mode (`'a'`) and writes the rows from the dataset using `csv.writer`.  

4. **Completion Message**:  
   - Prints a confirmation message indicating successful import of data from the dataset file to the target CSV file.  

This script is useful for merging or appending new data from one dataset into an existing CSV file without overwriting the file's existing contents.

# New Section

2. Movie Search
● Search movies by:
○ Title.
○ Keywords in descriptions or genres.
● Suggest movies based on user-selected genre or director.
"""

import csv
import pandas as pd

# 1. Movie Dataset

# Import data from an existing dataset (if needed)
with open('/content/drive/MyDrive/Python _iict/7_Movie_Recommendation_System.csv', 'r') as file:  # Replace 'movies_dataset.csv' with your dataset file
    reader = csv.reader(file)
    next(reader)  # Skip the header row if it exists
    with open('/content/Movie_Recommendation_System.csv', 'a', newline='') as output_file:
        writer = csv.writer(output_file)
        writer.writerows(reader)

# Load and explore the dataset
# Use the 'on_bad_lines='skip'' parameter to skip problematic lines
movies_df = pd.read_csv('/content/Movie_Recommendation_System.csv', on_bad_lines='skip')
print(movies_df.head())  # Display the first few rows
print(movies_df.info())  # Get information about the dataset

# 2. Movie Search

def search_by_title(title, movies_df):
    results = movies_df[movies_df['Title'].str.contains(title, case=False, na=False)]
    return results

def search_by_keywords(keywords, movies_df):
    # Check if 'Description' column exists before searching
    if 'Description' in movies_df.columns:
        results = movies_df[
            movies_df['Genre'].str.contains('|'.join(keywords), case=False, na=False) |
            movies_df['Description'].str.contains('|'.join(keywords), case=False, na=False)
        ]
    else:
        results = movies_df[movies_df['Genre'].str.contains('|'.join(keywords), case=False, na=False)]
    return results

def suggest_movies(genre=None, director=None, movies_df=movies_df):
    # Set default value for movies_df to avoid NameError
    results = movies_df[
        (movies_df['Genre'].str.contains(genre, case=False, na=False) if genre else True) &
        (movies_df['Director'].str.contains(director, case=False, na=False) if director else True)
    ]
    return results

# Example usage
title_search_results = search_by_title('Avengers', movies_df)
keyword_search_results = search_by_keywords(['Action', 'Sci-Fi'], movies_df)
suggested_movies = suggest_movies(genre='Comedy', director='Nolan')  # Using the default movies_df

print("Title Search Results:")
print(title_search_results)

print("\nKeyword Search Results:")
print(keyword_search_results)

print("\nSuggested Movies:")
print(suggested_movies)

"""Summary:
This Python script implements key functionalities for managing and exploring a movie dataset, including data import, search, and recommendations. Here's a summary:  

### 1. **Movie Dataset Management**
- **Data Import**:  
  - Reads data from an existing dataset file and appends it to another CSV file.  
  - Skips the header row of the source dataset to avoid duplication.  

- **Dataset Loading and Exploration**:  
  - Loads the consolidated dataset into a Pandas DataFrame for easy manipulation.  
  - Skips problematic lines during loading using the `on_bad_lines='skip'` parameter.  
  - Displays the first few rows and dataset information for an overview.  

### 2. **Movie Search**
- **Search by Title**:  
  - Allows users to search for movies containing a specific title (case-insensitive).  

- **Search by Keywords**:  
  - Searches for movies based on keywords in the `Genre` and optionally in the `Description` column (if present).  

### 3. **Movie Suggestions**
- **Suggestions by Genre and Director**:  
  - Recommends movies that match a specified genre and/or director.  
  - Flexible filtering ensures either or both criteria can be applied.  

### 4. **Example Usage**
- **Title Search**: Searches for movies with titles containing "Avengers".  
- **Keyword Search**: Finds movies with genres or descriptions containing "Action" or "Sci-Fi".  
- **Suggestions**: Recommends comedy movies directed by "Nolan".  

The script demonstrates practical use of Pandas for dataset manipulation, efficient searching using conditional filtering, and flexibility in applying search criteria.

# New Section

3. User Reviews and Ratings
● Allow users to rate movies and add reviews.
● Update the dataset with user ratings and calculate the average rating for each movie.
"""

import csv
import pandas as pd

# 1. Movie Dataset

# Import data from an existing dataset (if needed)
with open('/content/drive/MyDrive/Python _iict/7_Movie_Recommendation_System.csv', 'r') as file:  # Replace 'movies_dataset.csv' with your dataset file
    reader = csv.reader(file)
    next(reader)  # Skip the header row if it exists
    with open('/content/Movie_Recommendation_System.csv', 'a', newline='') as output_file:
        writer = csv.writer(output_file)
        writer.writerows(reader)

# Load and explore the dataset
# Use the 'on_bad_lines='skip'' parameter to skip problematic lines
movies_df = pd.read_csv('/content/Movie_Recommendation_System.csv', on_bad_lines='skip')
print(movies_df.head())  # Display the first few rows
print(movies_df.info())  # Get information about the dataset

# 2. Movie Search

def search_by_title(title, movies_df):
    results = movies_df[movies_df['Title'].str.contains(title, case=False, na=False)]
    return results

def search_by_keywords(keywords, movies_df):
    # Check if 'Description' column exists before searching
    if 'Description' in movies_df.columns:
        results = movies_df[
            movies_df['Genre'].str.contains('|'.join(keywords), case=False, na=False) |
            movies_df['Description'].str.contains('|'.join(keywords), case=False, na=False)
        ]
    else:
        results = movies_df[movies_df['Genre'].str.contains('|'.join(keywords), case=False, na=False)]
    return results

def suggest_movies(genre=None, director=None, movies_df=movies_df):
    # Set default value for movies_df to avoid NameError
    results = movies_df[
        (movies_df['Genre'].str.contains(genre, case=False, na=False) if genre else True) &
        (movies_df['Director'].str.contains(director, case=False, na=False) if director else True)
    ]
    return results

# Example usage of movie search functions
title_search_results = search_by_title('Avengers', movies_df)
keyword_search_results = search_by_keywords(['Action', 'Sci-Fi'], movies_df)
suggested_movies = suggest_movies(genre='Comedy', director='Nolan')  # Using the default movies_df

print("Title Search Results:")
print(title_search_results)

print("\nKeyword Search Results:")
print(keyword_search_results)

print("\nSuggested Movies:")
print(suggested_movies)


# 3. User Reviews and Ratings

def add_review(movie_id, rating, review, movies_df):
    """Adds a user review and rating to the dataset."""
    if movie_id in movies_df['Movie ID'].values:
        # If movie exists, update ratings and reviews
        movies_df.loc[movies_df['Movie ID'] == movie_id, 'Rating'] = (
            (movies_df.loc[movies_df['Movie ID'] == movie_id, 'Rating']
             * movies_df.loc[movies_df['Movie ID'] == movie_id, 'Number of Votes'] + rating)
            / (movies_df.loc[movies_df['Movie ID'] == movie_id, 'Number of Votes'] + 1)
        )
        movies_df.loc[movies_df['Movie ID'] == movie_id, 'Number of Votes'] += 1  # Increment vote count

        # Store review (if 'Reviews' column exists, append; otherwise, create)
        if 'Reviews' in movies_df.columns:
            movies_df.loc[movies_df['Movie ID'] == movie_id, 'Reviews'] = (
                movies_df.loc[movies_df['Movie ID'] == movie_id, 'Reviews'].astype(str) + '; ' + review
            )
        else:
            movies_df.loc[movies_df['Movie ID'] == movie_id, 'Reviews'] = review

        print(f"Review added for movie ID {movie_id}.")
    else:
        print(f"Movie ID {movie_id} not found in the dataset.")

    return movies_df  # Return the updated DataFrame

# Example usage of add_review function
movies_df = add_review(1, 4.5, "Great movie!", movies_df)
movies_df = add_review(2, 3, "Average.", movies_df)

# Save the updated dataset
movies_df.to_csv('/content/Movie_Recommendation_System.csv', index=False)

print("\nUpdated Dataset:")
print(movies_df)

"""Summary:
This Python script implements a function to add user reviews and ratings to a movie dataset, updating relevant fields dynamically. Here's a summary of its functionality:  

### 1. **Adding User Reviews and Ratings**
- **Purpose**:  
  - Allows users to submit ratings and reviews for movies by their unique `Movie ID`.  
  - Dynamically updates the dataset with the new information.  

- **Function Details**:  
  - **Rating Update**:  
    - Calculates a new average rating for the movie based on the existing rating, number of votes, and the new rating.  
    - Increments the `Number of Votes` column for the corresponding movie.  
  - **Review Storage**:  
    - Appends the new review to the `Reviews` column if it exists.  
    - Creates a new `Reviews` column if it does not already exist and adds the review.  
  - Prints a confirmation message if the movie is found, or a warning if the `Movie ID` is not in the dataset.  

### 2. **Example Usage**
- Adds two reviews to the dataset:  
  - A **4.5-star review** ("Great movie!") for the movie with ID 1.  
  - A **3-star review** ("Average.") for the movie with ID 2.  

### 3. **Saving Changes**
- After updating the dataset with new reviews and ratings, it is saved back to a CSV file (`/content/Movie_Recommendation_System.csv`).  

### 4. **Output**
- Displays the updated dataset after reviews and ratings are added.  

This function ensures that the dataset remains up-to-date with user feedback, providing an accurate representation of movie ratings and reviews. It also demonstrates efficient handling of dynamic updates in a structured dataset.

# New Section

4. Advanced Features (Optional for Bonus Marks)
● Personalized Recommendations:
○ Recommend movies based on the user’s rating history (e.g., genres they like).
● Top 10 Lists:
○ Generate "Top 10" lists based on:
■ Genres.
■ Release years.
■ Ratings.
● Visualizations:
○ Use Python libraries like Matplotlib to display:
■ Rating distributions.
■ Movie counts per genre.

● Sentiment Analysis:
○ Analyze user reviews to determine positive or negative sentiment using simple
keyword matching.
"""

import csv
import pandas as pd
import matplotlib.pyplot as plt

# 1. Movie Dataset

# Import data from an existing dataset (if needed)
with open('/content/drive/MyDrive/Python _iict/7_Movie_Recommendation_System.csv', 'r') as file:  # Replace 'movies_dataset.csv' with your dataset file
    reader = csv.reader(file)
    next(reader)  # Skip the header row if it exists
    with open('/content/Movie_Recommendation_System.csv', 'a', newline='') as output_file:
        writer = csv.writer(output_file)
        writer.writerows(reader)

# Load and explore the dataset
# Use the 'on_bad_lines='skip'' parameter to skip problematic lines
movies_df = pd.read_csv('/content/Movie_Recommendation_System.csv', on_bad_lines='skip')
print(movies_df.head())  # Display the first few rows
print(movies_df.info())  # Get information about the dataset

# 2. Movie Search

def search_by_title(title, movies_df):
    results = movies_df[movies_df['Title'].str.contains(title, case=False, na=False)]
    return results

def search_by_keywords(keywords, movies_df):
    # Check if 'Description' column exists before searching
    if 'Description' in movies_df.columns:
        results = movies_df[
            movies_df['Genre'].str.contains('|'.join(keywords), case=False, na=False) |
            movies_df['Description'].str.contains('|'.join(keywords), case=False, na=False)
        ]
    else:
        results = movies_df[movies_df['Genre'].str.contains('|'.join(keywords), case=False, na=False)]
    return results

def suggest_movies(genre=None, director=None, movies_df=movies_df):
    # Set default value for movies_df to avoid NameError
    results = movies_df[
        (movies_df['Genre'].str.contains(genre, case=False, na=False) if genre else True) &
        (movies_df['Director'].str.contains(director, case=False, na=False) if director else True)
    ]
    return results

# Example usage of movie search functions
title_search_results = search_by_title('Avengers', movies_df)
keyword_search_results = search_by_keywords(['Action', 'Sci-Fi'], movies_df)
suggested_movies = suggest_movies(genre='Comedy', director='Nolan')  # Using the default movies_df

print("Title Search Results:")
print(title_search_results)

print("\nKeyword Search Results:")
print(keyword_search_results)

print("\nSuggested Movies:")
print(suggested_movies)

# 3. User Reviews and Ratings

def add_review(movie_id, rating, review, movies_df):
    """Adds a user review and rating to the dataset."""
    if movie_id in movies_df['Movie ID'].values:
        # If movie exists, update ratings and reviews
        movies_df.loc[movies_df['Movie ID'] == movie_id, 'Rating'] = (
            (movies_df.loc[movies_df['Movie ID'] == movie_id, 'Rating']
             * movies_df.loc[movies_df['Movie ID'] == movie_id, 'Number of Votes'] + rating)
            / (movies_df.loc[movies_df['Movie ID'] == movie_id, 'Number of Votes'] + 1)
        )
        movies_df.loc[movies_df['Movie ID'] == movie_id, 'Number of Votes'] += 1  # Increment vote count

        # Store review (if 'Reviews' column exists, append; otherwise, create)
        if 'Reviews' in movies_df.columns:
            movies_df.loc[movies_df['Movie ID'] == movie_id, 'Reviews'] = (
                movies_df.loc[movies_df['Movie ID'] == movie_id, 'Reviews'].astype(str) + '; ' + review
            )
        else:
            movies_df.loc[movies_df['Movie ID'] == movie_id, 'Reviews'] = review

        print(f"Review added for movie ID {movie_id}.")
    else:
        print(f"Movie ID {movie_id} not found in the dataset.")

    return movies_df  # Return the updated DataFrame

# Example usage of add_review function
movies_df = add_review(1, 4.5, "Great movie!", movies_df)
movies_df = add_review(2, 3, "Average.", movies_df)

# Save the updated dataset
movies_df.to_csv('/content/Movie_Recommendation_System.csv', index=False)

print("\nUpdated Dataset:")
print(movies_df)


# 4. Advanced Features

# Personalized Recommendations (basic example)
def personalized_recommendations(user_ratings, movies_df):
    """Recommends movies based on user's rating history."""
    # (This is a simple example; you can enhance it with collaborative filtering, etc.)
    user_genres = movies_df[movies_df['Movie ID'].isin(user_ratings.keys())]['Genre'].str.split(',').explode().unique()
    recommendations = movies_df[movies_df['Genre'].str.contains('|'.join(user_genres), case=False, na=False)]
    return recommendations

# Top 10 Lists
def top_10_movies(criteria, movies_df):
    """Generates Top 10 lists based on given criteria."""
    if criteria == 'genre':
        return movies_df.groupby('Genre')['Rating'].mean().sort_values(ascending=False).head(10)
    elif criteria == 'release_year':
        return movies_df.groupby('Release Year')['Rating'].mean().sort_values(ascending=False).head(10)
    elif criteria == 'rating':
        return movies_df.sort_values(by=['Rating', 'Number of Votes'], ascending=[False, False]).head(10)
    else:
        print("Invalid criteria. Choose from 'genre', 'release_year', or 'rating'.")
        return None

# Visualizations
def visualize_rating_distribution(movies_df):
    """Displays rating distribution using Matplotlib."""
    plt.hist(movies_df['Rating'], bins=10)
    plt.xlabel('Rating')
    plt.ylabel('Frequency')
    plt.title('Rating Distribution')
    plt.show()

def visualize_genre_counts(movies_df):
    """Displays movie counts per genre using Matplotlib."""
    genre_counts = movies_df['Genre'].str.split(',').explode().value_counts()
    genre_counts.plot(kind='bar')
    plt.xlabel('Genre')
    plt.ylabel('Number of Movies')
    plt.title('Movie Counts per Genre')
    plt.show()

# Sentiment Analysis (basic example)
def analyze_sentiment(review):
    """Analyzes sentiment using simple keyword matching."""
    # (This is a basic example; you can use more sophisticated sentiment analysis libraries)
    positive_keywords = ['great', 'good', 'excellent', 'amazing', 'fantastic']
    negative_keywords = ['bad', 'terrible', 'awful', 'boring', 'disappointing']

    if any(keyword in review.lower() for keyword in positive_keywords):
        return 'Positive'
    elif any(keyword in review.lower() for keyword in negative_keywords):
        return 'Negative'
    else:
        return 'Neutral'

# Example usage of advanced features
user_ratings = {1: 4.5, 2: 3}  # Example user ratings
recommendations = personalized_recommendations(user_ratings, movies_df)
print("\nPersonalized Recommendations:")
print(recommendations)

top_10_genres = top_10_movies('genre', movies_df)
print("\nTop 10 Genres by Average Rating:")
print(top_10_genres)

visualize_rating_distribution(movies_df)
visualize_genre_counts(movies_df)

example_review = "This movie was great!"
sentiment = analyze_sentiment(example_review)
print(f"\nSentiment of the review: '{example_review}' is {sentiment}")

"""Summary:
This script introduces advanced features for enhancing the functionality of the movie recommendation system, including personalized recommendations, top 10 lists, data visualizations, and sentiment analysis. Here's a summary:

### 1. **Personalized Recommendations**
- **Functionality**:  
  - Recommends movies based on the genres of films a user has rated highly.  
  - Identifies genres from the user's ratings and suggests movies matching those genres.  
- **Example**: A user who rated movies in specific genres highly receives suggestions in those genres.

---

### 2. **Top 10 Lists**
- **Criteria Options**:  
  - **Genre**: Lists the top 10 genres by average rating.  
  - **Release Year**: Lists the top 10 release years by average rating.  
  - **Rating**: Lists the top 10 movies by rating, considering vote count for tie-breaking.  
- **Flexibility**: Ensures users can explore movies based on their preferences.  
- **Error Handling**: Warns when invalid criteria are provided.

---

### 3. **Visualizations**
- **Rating Distribution**:  
  - Plots a histogram of movie ratings to show their frequency distribution.  
  - Helps users understand the overall quality of movies in the dataset.  
- **Genre Counts**:  
  - Plots a bar chart of the number of movies in each genre.  
  - Provides insights into the genre diversity of the dataset.  

---

### 4. **Sentiment Analysis**
- **Basic Sentiment Analysis**:  
  - Analyzes user reviews using keyword matching for positive and negative sentiments.  
  - Keywords like "great," "amazing," or "terrible" determine whether a review is positive, negative, or neutral.  
- **Example**: The review "This movie was great!" is classified as positive.

---

### 5. **Example Outputs**
- **Personalized Recommendations**: Suggests movies based on user ratings.  
- **Top 10 Genres**: Displays genres ranked by average ratings.  
- **Visualizations**: Shows graphical insights into ratings and genre distribution.  
- **Sentiment Analysis**: Classifies a sample review as positive, negative, or neutral.  

This script enhances user engagement by providing tailored suggestions, deeper data insights, and tools for understanding movie reviews.

The histogram visualizes the **rating distribution** of movies in the dataset. Here's a summary based on the chart:  

1. **Data Characteristics**:  
   - The chart shows the frequency of ratings on the x-axis and the number of occurrences (movies) on the y-axis.  
   - Most movies have ratings concentrated around a very narrow range (close to zero).  

2. **Insights**:  
   - There may be an issue with the dataset, such as ratings being improperly scaled (e.g., inflated values) or an error in data entry causing unusually high values.  
   - Ratings that extend to extreme values (e.g., 1750–2000) are likely outliers.  

3. **Next Steps**:  
   - Investigate the dataset for anomalies or inconsistencies in the `Rating` column.  
   - Normalize the data or remove outliers for a better representation of the actual rating distribution.  
   - Replot the chart after cleaning the data for a more accurate and meaningful visualization.

The bar chart illustrates the **number of movies per genre** in the dataset. Here's a summary based on the chart:

1. **Most Popular Genres**:
   - **Drama** is the most common genre, with over 60 movies.
   - **Crime** ranks second, followed by **Action**, **Adventure**, and **Sci-Fi**, each with approximately 30–40 movies.

2. **Least Represented Genres**:
   - Genres like **War**, **Horror**, and **Inc.** have the lowest counts, with fewer than 10 movies.

3. **Insights**:
   - The dataset is heavily skewed toward certain genres, such as Drama and Crime.
   - There may be an underrepresentation of niche genres, which could impact recommendations for users interested in those categories.

4. **Next Steps**:
   - Consider balancing the dataset by adding more movies from underrepresented genres.
   - Evaluate whether the skewed genre distribution aligns with the intended purpose of the recommendation system or user preferences.

# New Section

User Interface

5. User Interface
● Interactive menu with options to:
○ View movies by filters.
○ Add ratings and reviews.
○ View recommended or top-rated movies.
"""

import csv
import pandas as pd
import matplotlib.pyplot as plt

# 1. Movie Dataset

# Import data from an existing dataset (if needed)
with open('/content/drive/MyDrive/Python _iict/7_Movie_Recommendation_System.csv', 'r') as file:  # Replace 'movies_dataset.csv' with your dataset file
    reader = csv.reader(file)
    next(reader)  # Skip the header row if it exists
    with open('/content/Movie_Recommendation_System.csv', 'a', newline='') as output_file:
        writer = csv.writer(output_file)
        writer.writerows(reader)

# Load and explore the dataset
# Use the 'on_bad_lines='skip'' parameter to skip problematic lines
movies_df = pd.read_csv('/content/Movie_Recommendation_System.csv', on_bad_lines='skip')
print(movies_df.head())  # Display the first few rows
print(movies_df.info())  # Get information about the dataset

# 2. Movie Search

def search_by_title(title, movies_df):
    results = movies_df[movies_df['Title'].str.contains(title, case=False, na=False)]
    return results

def search_by_keywords(keywords, movies_df):
    # Check if 'Description' column exists before searching
    if 'Description' in movies_df.columns:
        results = movies_df[
            movies_df['Genre'].str.contains('|'.join(keywords), case=False, na=False) |
            movies_df['Description'].str.contains('|'.join(keywords), case=False, na=False)
        ]
    else:
        results = movies_df[movies_df['Genre'].str.contains('|'.join(keywords), case=False, na=False)]
    return results

def suggest_movies(genre=None, director=None, movies_df=movies_df):
    # Set default value for movies_df to avoid NameError
    results = movies_df[
        (movies_df['Genre'].str.contains(genre, case=False, na=False) if genre else True) &
        (movies_df['Director'].str.contains(director, case=False, na=False) if director else True)
    ]
    return results

# Example usage of movie search functions
title_search_results = search_by_title('Avengers', movies_df)
keyword_search_results = search_by_keywords(['Action', 'Sci-Fi'], movies_df)
suggested_movies = suggest_movies(genre='Comedy', director='Nolan')  # Using the default movies_df

print("Title Search Results:")
print(title_search_results)

print("\nKeyword Search Results:")
print(keyword_search_results)

print("\nSuggested Movies:")
print(suggested_movies)

# 3. User Reviews and Ratings

def add_review(movie_id, rating, review, movies_df):
    """Adds a user review and rating to the dataset."""
    if movie_id in movies_df['Movie ID'].values:
        # If movie exists, update ratings and reviews
        movies_df.loc[movies_df['Movie ID'] == movie_id, 'Rating'] = (
            (movies_df.loc[movies_df['Movie ID'] == movie_id, 'Rating']
             * movies_df.loc[movies_df['Movie ID'] == movie_id, 'Number of Votes'] + rating)
            / (movies_df.loc[movies_df['Movie ID'] == movie_id, 'Number of Votes'] + 1)
        )
        movies_df.loc[movies_df['Movie ID'] == movie_id, 'Number of Votes'] += 1  # Increment vote count

        # Store review (if 'Reviews' column exists, append; otherwise, create)
        if 'Reviews' in movies_df.columns:
            movies_df.loc[movies_df['Movie ID'] == movie_id, 'Reviews'] = (
                movies_df.loc[movies_df['Movie ID'] == movie_id, 'Reviews'].astype(str) + '; ' + review
            )
        else:
            movies_df.loc[movies_df['Movie ID'] == movie_id, 'Reviews'] = review

        print(f"Review added for movie ID {movie_id}.")
    else:
        print(f"Movie ID {movie_id} not found in the dataset.")

    return movies_df  # Return the updated DataFrame

# Example usage of add_review function
movies_df = add_review(1, 4.5, "Great movie!", movies_df)
movies_df = add_review(2, 3, "Average.", movies_df)

# Save the updated dataset
movies_df.to_csv('/content/Movie_Recommendation_System.csv', index=False)

print("\nUpdated Dataset:")
print(movies_df)


# 4. Advanced Features

# Personalized Recommendations (basic example)
def personalized_recommendations(user_ratings, movies_df):
    """Recommends movies based on user's rating history."""
    # (This is a simple example; you can enhance it with collaborative filtering, etc.)
    user_genres = movies_df[movies_df['Movie ID'].isin(user_ratings.keys())]['Genre'].str.split(',').explode().unique()
    recommendations = movies_df[movies_df['Genre'].str.contains('|'.join(user_genres), case=False, na=False)]
    return recommendations

# Top 10 Lists
def top_10_movies(criteria, movies_df):
    """Generates Top 10 lists based on given criteria."""
    if criteria == 'genre':
        return movies_df.groupby('Genre')['Rating'].mean().sort_values(ascending=False).head(10)
    elif criteria == 'release_year':
        return movies_df.groupby('Release Year')['Rating'].mean().sort_values(ascending=False).head(10)
    elif criteria == 'rating':
        return movies_df.sort_values(by=['Rating', 'Number of Votes'], ascending=[False, False]).head(10)
    else:
        print("Invalid criteria. Choose from 'genre', 'release_year', or 'rating'.")
        return None

# Visualizations
def visualize_rating_distribution(movies_df):
    """Displays rating distribution using Matplotlib."""
    plt.hist(movies_df['Rating'], bins=10)
    plt.xlabel('Rating')
    plt.ylabel('Frequency')
    plt.title('Rating Distribution')
    plt.show()

def visualize_genre_counts(movies_df):
    """Displays movie counts per genre using Matplotlib."""
    genre_counts = movies_df['Genre'].str.split(',').explode().value_counts()
    genre_counts.plot(kind='bar')
    plt.xlabel('Genre')
    plt.ylabel('Number of Movies')
    plt.title('Movie Counts per Genre')
    plt.show()

# Sentiment Analysis (basic example)
def analyze_sentiment(review):
    """Analyzes sentiment using simple keyword matching."""
    # (This is a basic example; you can use more sophisticated sentiment analysis libraries)
    positive_keywords = ['great', 'good', 'excellent', 'amazing', 'fantastic']
    negative_keywords = ['bad', 'terrible', 'awful', 'boring', 'disappointing']

    if any(keyword in review.lower() for keyword in positive_keywords):
        return 'Positive'
    elif any(keyword in review.lower() for keyword in negative_keywords):
        return 'Negative'
    else:
        return 'Neutral'

# Example usage of advanced features
user_ratings = {1: 4.5, 2: 3}  # Example user ratings
recommendations = personalized_recommendations(user_ratings, movies_df)
print("\nPersonalized Recommendations:")
print(recommendations)

top_10_genres = top_10_movies('genre', movies_df)
print("\nTop 10 Genres by Average Rating:")
print(top_10_genres)

visualize_rating_distribution(movies_df)
visualize_genre_counts(movies_df)

example_review = "This movie was great!"
sentiment = analyze_sentiment(example_review)
print(f"\nSentiment of the review: '{example_review}' is {sentiment}")

# 5. User Interface

def main():
    """Main function to run the interactive menu."""
    while True:
        print("\nMovie Recommendation System Menu:")
        print("1. View movies by filters")
        print("2. Add ratings and reviews")
        print("3. View recommended or top-rated movies")
        print("4. Exit")

        choice = input("Enter your choice (1-4): ")

        if choice == '1':
            # View movies by filters (call your existing functions)
            # ...
            pass  # Replace with your filter logic
        elif choice == '2':
            # Add ratings and reviews (call your existing functions)
            # ...
            pass  # Replace with your review/rating logic
        elif choice == '3':
            # View recommendations or top-rated movies (call your existing functions)
            # ...
            pass  # Replace with your recommendation/top-rated logic
        elif choice == '4':
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()

""" **User Interface (UI)** for the Movie Recommendation System. Here's a summary:

1. **Purpose**:
   - The `main()` function creates an **interactive menu** that allows users to navigate various functionalities of the recommendation system.

2. **Menu Options**:
   - **Option 1**: "View movies by filters" – Users can explore movies based on specific criteria such as genre, release year, or director. (Functionality to be implemented.)
   - **Option 2**: "Add ratings and reviews" – Users can rate movies and leave reviews, updating the dataset. (Functionality to be implemented.)
   - **Option 3**: "View recommended or top-rated movies" – Users can view personalized recommendations or top-rated movies. (Functionality to be implemented.)
   - **Option 4**: "Exit" – Ends the program.

3. **Interactivity**:
   - The program uses a **while loop** to keep the menu active until the user chooses to exit (Option 4).
   - User input is taken to navigate through the menu.

4. **Implementation Notes**:
   - Placeholder logic (`pass`) is used for options 1–3, indicating the need to integrate the respective functionalities (e.g., filters, reviews, recommendations) into the menu.

5. **Usage**:
   - When executed, the program provides a simple and intuitive text-based interface for users to interact with the system.
"""